{"version":3,"file":"dropdown-select.min.js","sources":["../src/components/dropdown-select.js","../src/components/dropdown-trigger.js","../src/components/dropdown-options.js","../src/components/dropdown-option.js","../src/index.js"],"sourcesContent":["/**\n * dropdown-select component that handles the functionality of a custom dropdown\n * @class DropdownSelect\n * @extends HTMLElement\n */\nexport class DropdownSelect extends HTMLElement {\n  // private fields for event handlers\n  #handleTriggerClick;\n  #handleOptionClick;\n  #handleDocumentClick;\n  #handleKeyDown;\n\n  // private fields for elements\n  #trigger;\n  #input;\n  #optionsContainer;\n  #options;\n  #label;\n  #currentFocusIndex = -1;\n\n  constructor() {\n    super();\n\n    // set default attributes\n    this.setAttribute('aria-hidden', 'true');\n\n    // bind event handlers\n    this.#handleTriggerClick = this.toggleDropdown.bind(this);\n    this.#handleOptionClick = this.selectOption.bind(this);\n    this.#handleDocumentClick = this.handleOutsideClick.bind(this);\n    this.#handleKeyDown = this.handleKeyboardNavigation.bind(this);\n  }\n\n  /**\n   * when element is connected to the dom\n   */\n  connectedCallback() {\n    // query all dom elements needed for the component\n    this.#trigger = this.querySelector('dropdown-trigger');\n    this.#input = this.querySelector('input');\n    this.#optionsContainer = this.querySelector('dropdown-options');\n    this.#options = this.querySelectorAll('dropdown-option');\n    this.#label = this.#trigger?.querySelector('.dropdown-label');\n\n    // Make sure the component itself isn't focusable\n    this.setAttribute('tabindex', '-1');\n\n    // initialize component\n    this.setupAriaAttributes();\n    this.bindUI();\n\n    // set initial state\n    this.hide();\n  }\n\n  /**\n   * clean up event listeners when element is removed\n   */\n  disconnectedCallback() {\n    this.unbindUI();\n  }\n\n  /**\n   * sets up aria attributes for accessibility\n   */\n  setupAriaAttributes() {\n    const listbox = this.#optionsContainer;\n    const trigger = this.#trigger;\n\n    // setup trigger button\n    trigger.setAttribute('aria-haspopup', 'listbox');\n    trigger.setAttribute('aria-expanded', 'false');\n    trigger.setAttribute('role', 'combobox');\n\n    if (!trigger.id) {\n      trigger.id = `dropdown-trigger-${Date.now()}`;\n    }\n\n    // setup listbox\n    listbox.setAttribute('role', 'listbox');\n    listbox.setAttribute('aria-labelledby', trigger.id);\n\n    // setup options\n    this.#options.forEach((option, index) => {\n      option.setAttribute('role', 'option');\n      option.setAttribute('aria-selected', 'false');\n      option.setAttribute('tabindex', '-1');\n      option.id = `${trigger.id}-option-${index}`;\n    });\n  }\n\n  /**\n   * binds the necessary ui events to the component\n   */\n  bindUI() {\n    // bind trigger click\n    this.#trigger.addEventListener('click', this.#handleTriggerClick);\n\n    // bind option clicks\n    this.#options.forEach((option) => {\n      option.addEventListener('click', this.#handleOptionClick);\n    });\n  }\n\n  /**\n   * unbinds event listeners\n   */\n  unbindUI() {\n    // remove trigger event\n    this.#trigger.removeEventListener('click', this.#handleTriggerClick);\n\n    // remove option events\n    this.#options.forEach((option) => {\n      option.removeEventListener('click', this.#handleOptionClick);\n    });\n\n    // remove document events if they exist\n    document.removeEventListener('click', this.#handleDocumentClick);\n    document.removeEventListener('keydown', this.#handleKeyDown);\n  }\n\n  /**\n   * handles click events outside of the dropdown to close it\n   * @param {Event} e - the click event\n   */\n  handleOutsideClick(e) {\n    // if click is outside of the dropdown, close it\n    if (!this.contains(e.target)) {\n      this.hide();\n    }\n  }\n\n  /**\n   * handles keyboard navigation in the dropdown\n   * @param {KeyboardEvent} e - the keyboard event\n   */\n  handleKeyboardNavigation(e) {\n    const options = Array.from(this.#options);\n\n    switch (e.key) {\n      case 'Escape':\n        e.preventDefault();\n        this.hide();\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault();\n\n        // if focus is on trigger, move to first option\n        if (document.activeElement === this.#trigger) {\n          this.#currentFocusIndex = -1;\n        }\n\n        // move to next option or loop to first\n        if (this.#currentFocusIndex < options.length - 1) {\n          this.focusOption(this.#currentFocusIndex + 1);\n        }\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n\n        // move to previous option or loop to last\n        if (this.#currentFocusIndex > 0) {\n          this.focusOption(this.#currentFocusIndex - 1);\n        } else if (this.#currentFocusIndex === 0) {\n          // if on first option, move focus back to trigger\n          this.#trigger.focus();\n          this.#currentFocusIndex = -1;\n        }\n        break;\n\n      case 'Home':\n        e.preventDefault();\n        this.focusOption(0);\n        break;\n\n      case 'End':\n        e.preventDefault();\n        this.focusOption(options.length - 1);\n        break;\n\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n\n        // if dropdown is closed and trigger is focused, open it\n        if (\n          this.getAttribute('aria-hidden') === 'true' &&\n          document.activeElement === this.#trigger\n        ) {\n          this.show();\n          return;\n        }\n\n        // if focus is on an option, select it\n        if (this.#currentFocusIndex >= 0) {\n          this.selectOption({ target: options[this.#currentFocusIndex] });\n        } else if (document.activeElement === this.#trigger) {\n          // if focus is on trigger, toggle the dropdown\n          this.toggleDropdown();\n        }\n        break;\n\n      default:\n        // handle typeahead - find option starting with pressed key\n        const key = e.key.toLowerCase();\n\n        // only proceed if it's a single character\n        if (key.length === 1) {\n          // find the first option that starts with the pressed key\n          const matchingOption = options.find((option) =>\n            option.textContent.trim().toLowerCase().startsWith(key)\n          );\n\n          if (matchingOption) {\n            const index = options.indexOf(matchingOption);\n            this.focusOption(index);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * focuses a specific option by index\n   * @param {number} index - the index of the option to focus\n   */\n  focusOption(index) {\n    const options = Array.from(this.#options);\n\n    // reset tabindex on all options\n    options.forEach((opt) => {\n      opt.setAttribute('tabindex', '-1');\n    });\n\n    // set tabindex on target option and focus it\n    if (options[index]) {\n      options[index].setAttribute('tabindex', '0');\n      options[index].focus();\n      this.#currentFocusIndex = index;\n    }\n  }\n\n  /**\n   * toggles the dropdown open/closed\n   */\n  toggleDropdown() {\n    if (this.getAttribute('aria-hidden') === 'true') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * selects an option from the dropdown\n   * @param {Event} e - the click event\n   */\n  selectOption(e) {\n    const option = e.target.closest('dropdown-option');\n    if (!option) return;\n\n    // update aria-selected on all options\n    this.#options.forEach((opt) => {\n      opt.setAttribute('aria-selected', 'false');\n    });\n\n    // mark selected option\n    option.setAttribute('aria-selected', 'true');\n\n    // update the input value\n    if (this.#input) {\n      this.#input.value = option.dataset.value || option.textContent.trim();\n    }\n\n    // update the visible label\n    if (this.#label) {\n      this.#label.textContent = option.textContent.trim();\n    }\n\n    // dispatch change event\n    this.dispatchEvent(\n      new CustomEvent('change', {\n        detail: {\n          value: option.dataset.value || option.textContent.trim(),\n          text: option.textContent.trim(),\n        },\n        bubbles: true,\n      })\n    );\n\n    // close the dropdown\n    this.hide();\n  }\n\n  /**\n   * shows the dropdown options\n   */\n  show() {\n    // set attributes for open state\n    this.setAttribute('aria-hidden', 'false');\n    this.#trigger.setAttribute('aria-expanded', 'true');\n\n    // find selected option or default to first\n    const selectedOption = Array.from(this.#options).find(\n      (opt) => opt.getAttribute('aria-selected') === 'true'\n    );\n\n    if (selectedOption) {\n      const selectedIndex = Array.from(this.#options).indexOf(selectedOption);\n      this.focusOption(selectedIndex);\n    } else if (this.#options.length > 0) {\n      this.focusOption(0);\n    }\n\n    // add global event listeners\n    document.addEventListener('click', this.#handleDocumentClick);\n    document.addEventListener('keydown', this.#handleKeyDown);\n  }\n\n  /**\n   * hides the dropdown options\n   */\n  hide() {\n    // set attributes for closed state\n    this.setAttribute('aria-hidden', 'true');\n    this.#trigger.setAttribute('aria-expanded', 'false');\n\n    // reset the current focus index\n    this.#currentFocusIndex = -1;\n\n    // remove global event listeners\n    document.removeEventListener('click', this.#handleDocumentClick);\n    document.removeEventListener('keydown', this.#handleKeyDown);\n\n    // return focus to trigger\n    this.#trigger.focus();\n  }\n}\n","/**\n * dropdown-trigger component\n * @class DropdownTrigger\n * @extends HTMLElement\n */\nexport class DropdownTrigger extends HTMLElement {\n  #handleKeyDown;\n  \n  constructor() {\n    super();\n    // Make the trigger focusable\n    this.setAttribute('tabindex', '0');\n    this.#handleKeyDown = this.#onKeyDown.bind(this);\n  }\n\n  connectedCallback() {\n    // Add caret if not present\n    if (!this.querySelector('.dropdown-caret')) {\n      const caret = document.createElement('span');\n      caret.className = 'dropdown-caret';\n      this.appendChild(caret);\n    }\n    \n    // Add keyboard event listener\n    this.addEventListener('keydown', this.#handleKeyDown);\n  }\n  \n  disconnectedCallback() {\n    this.removeEventListener('keydown', this.#handleKeyDown);\n  }\n  \n  /**\n   * Handle keydown events on the trigger\n   * @param {KeyboardEvent} e - The keyboard event\n   * @private\n   */\n  #onKeyDown(e) {\n    // Handle Enter and Space key presses\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      e.stopPropagation(); // Prevent event bubbling\n      \n      // Find parent dropdown-select and toggle it\n      const dropdown = this.closest('dropdown-select');\n      if (dropdown && typeof dropdown.toggleDropdown === 'function') {\n        dropdown.toggleDropdown();\n      } else {\n        // Fallback to click if direct method call isn't available\n        this.click();\n      }\n    }\n  }\n}\n","/**\n * dropdown-options component\n * @class DropdownOptions\n * @extends HTMLElement\n */\nexport class DropdownOptions extends HTMLElement {\n  constructor() {\n    super();\n  }\n}\n","/**\n * dropdown-option component\n * @class DropdownOption\n * @extends HTMLElement\n */\nexport class DropdownOption extends HTMLElement {\n  constructor() {\n    super();\n  }\n}\n","/**\n * @file Main entry point for dropdown-select web component\n * @author Cory Schulz\n * @version 0.1.0\n */\n\n// import styles\nimport './styles/dropdown-select.scss';\n\n// import components\nimport { DropdownSelect } from './components/dropdown-select.js';\nimport { DropdownTrigger } from './components/dropdown-trigger.js';\nimport { DropdownOptions } from './components/dropdown-options.js';\nimport { DropdownOption } from './components/dropdown-option.js';\n\n// export components for external use\nexport { DropdownSelect, DropdownTrigger, DropdownOptions, DropdownOption };\n\n// define custom elements if not already defined\nif (!customElements.get('dropdown-select')) {\n  customElements.define('dropdown-select', DropdownSelect);\n}\n\nif (!customElements.get('dropdown-trigger')) {\n  customElements.define('dropdown-trigger', DropdownTrigger);\n}\n\nif (!customElements.get('dropdown-options')) {\n  customElements.define('dropdown-options', DropdownOptions);\n}\n\nif (!customElements.get('dropdown-option')) {\n  customElements.define('dropdown-option', DropdownOption);\n}\n"],"names":["DropdownSelect","HTMLElement","handleTriggerClick","handleOptionClick","handleDocumentClick","handleKeyDown","trigger","input","optionsContainer","options","label","currentFocusIndex","constructor","super","this","setAttribute","toggleDropdown","bind","selectOption","handleOutsideClick","handleKeyboardNavigation","connectedCallback","querySelector","querySelectorAll","setupAriaAttributes","bindUI","hide","disconnectedCallback","unbindUI","listbox","id","Date","now","forEach","option","index","addEventListener","removeEventListener","document","e","contains","target","Array","from","key","preventDefault","activeElement","length","focusOption","focus","getAttribute","show","toLowerCase","matchingOption","find","textContent","trim","startsWith","indexOf","opt","closest","value","dataset","dispatchEvent","CustomEvent","detail","text","bubbles","selectedOption","selectedIndex","DropdownTrigger","onKeyDown","caret","createElement","className","appendChild","stopPropagation","dropdown","click","DropdownOptions","DropdownOption","customElements","get","define"],"mappings":"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"}