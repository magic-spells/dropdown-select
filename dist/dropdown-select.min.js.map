{"version":3,"file":"dropdown-select.min.js","sources":["../src/components/dropdown-select.js","../src/components/dropdown-select-trigger.js","../src/components/dropdown-options.js","../src/components/dropdown-option.js","../src/index.js"],"sourcesContent":["/**\n * dropdown-select component that handles the functionality of a custom dropdown\n * @class DropdownSelect\n * @extends HTMLElement\n */\nexport class DropdownSelect extends HTMLElement {\n  // private fields for event handlers\n  #handleDocumentClick;\n  #handleKeyDown;\n\n  // private fields for elements\n  #trigger;\n  #input;\n  #optionsContainer;\n  #options;\n  #label;\n  #currentFocusIndex = -1;\n\n  // Observed attributes\n  static get observedAttributes() {\n    return ['position'];\n  }\n\n  constructor() {\n    super();\n\n    // set default attributes\n    this.setAttribute('aria-hidden', 'true');\n\n    // bind event handlers\n    this.#handleDocumentClick = this.handleOutsideClick.bind(this);\n    this.#handleKeyDown = this.handleKeyboardNavigation.bind(this);\n  }\n\n  /**\n   * when element is connected to the dom\n   */\n  connectedCallback() {\n    // query all dom elements needed for the component\n    this.#trigger = this.querySelector('dropdown-select-trigger');\n    this.#input = this.querySelector('input');\n    this.#optionsContainer = this.querySelector('dropdown-options');\n    this.#options = this.querySelectorAll('dropdown-option');\n    this.#label = this.#trigger?.querySelector('.dropdown-label');\n\n    // Make sure the component itself isn't focusable\n    this.setAttribute('tabindex', '-1');\n\n    // initialize component\n    this.setupAriaAttributes();\n    this.bindUI();\n    this.initializeSelectedOption();\n\n    // set initial state\n    this.hide();\n  }\n\n  /**\n   * clean up event listeners when element is removed\n   */\n  disconnectedCallback() {\n    this.unbindUI();\n  }\n\n  /**\n   * Gets the value from an option element, supporting both 'value' and 'data-value' attributes\n   * @param {HTMLElement} option - The option element\n   * @returns {string} The option value\n   * @private\n   */\n  #getOptionValue(option) {\n    return option.getAttribute('value') || option.dataset.value || option.textContent.trim();\n  }\n\n  /**\n   * Initializes any pre-selected options based on 'selected' attribute or existing aria-selected\n   * @private\n   */\n  initializeSelectedOption() {\n    // Look for options with 'selected' attribute first\n    let selectedOption = Array.from(this.#options).find(\n      (opt) => opt.hasAttribute('selected')\n    );\n\n    // If no 'selected' attribute, look for aria-selected=\"true\"\n    if (!selectedOption) {\n      selectedOption = Array.from(this.#options).find(\n        (opt) => opt.getAttribute('aria-selected') === 'true'\n      );\n    }\n\n    // If we found a selected option, update the component state\n    if (selectedOption) {\n      // Clear all selections first\n      this.#options.forEach((opt) => {\n        opt.removeAttribute('selected');\n        opt.setAttribute('aria-selected', 'false');\n      });\n\n      // Set the selected option (keep both attributes in sync)\n      selectedOption.setAttribute('aria-selected', 'true');\n      selectedOption.setAttribute('selected', '');\n\n      // Update the input value\n      if (this.#input) {\n        this.#input.value = this.#getOptionValue(selectedOption);\n      }\n\n      // Update the visible label\n      if (this.#label) {\n        this.#label.textContent = selectedOption.textContent.trim();\n      }\n\n      // Dispatch change event for initial state\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: {\n            value: this.#getOptionValue(selectedOption),\n            text: selectedOption.textContent.trim(),\n          },\n          bubbles: true,\n        })\n      );\n    }\n  }\n\n  /**\n   * sets up aria attributes for accessibility\n   */\n  setupAriaAttributes() {\n    const listbox = this.#optionsContainer;\n    const trigger = this.#trigger;\n\n    // setup trigger button\n    trigger.setAttribute('aria-haspopup', 'listbox');\n    trigger.setAttribute('aria-expanded', 'false');\n    trigger.setAttribute('role', 'combobox');\n\n    if (!trigger.id) {\n      trigger.id = `dropdown-select-trigger-${Date.now()}`;\n    }\n\n    // setup listbox\n    listbox.setAttribute('role', 'listbox');\n    listbox.setAttribute('aria-labelledby', trigger.id);\n\n    // setup options\n    this.#options.forEach((option, index) => {\n      option.setAttribute('role', 'option');\n      option.setAttribute('aria-selected', 'false');\n      option.setAttribute('tabindex', '-1');\n      option.id = `${trigger.id}-option-${index}`;\n    });\n  }\n\n  /**\n   * binds the necessary ui events to the component\n   */\n  bindUI() {\n    // No need to bind element events - child components manage their own events\n    // This method is kept for potential future global event binding\n  }\n\n  /**\n   * unbinds event listeners\n   */\n  unbindUI() {\n    // No element events to remove - child components manage their own events\n    // This method is kept for potential future global event cleanup\n\n    // remove document events if they exist\n    document.removeEventListener('click', this.#handleDocumentClick);\n    document.removeEventListener('keydown', this.#handleKeyDown);\n  }\n\n  /**\n   * handles click events outside of the dropdown to close it\n   * @param {Event} e - the click event\n   */\n  handleOutsideClick(e) {\n    // if click is outside of the dropdown, close it\n    if (!this.contains(e.target)) {\n      this.hide();\n    }\n  }\n\n  /**\n   * handles keyboard navigation in the dropdown\n   * @param {KeyboardEvent} e - the keyboard event\n   */\n  handleKeyboardNavigation(e) {\n    const options = Array.from(this.#options);\n\n    switch (e.key) {\n      case 'Escape':\n        e.preventDefault();\n        this.hide();\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault();\n\n        // if focus is on trigger, move to first option\n        if (document.activeElement === this.#trigger) {\n          this.#currentFocusIndex = -1;\n        }\n\n        // move to next option or loop to first\n        if (this.#currentFocusIndex < options.length - 1) {\n          this.focusOption(this.#currentFocusIndex + 1);\n        }\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n\n        // move to previous option or loop to last\n        if (this.#currentFocusIndex > 0) {\n          this.focusOption(this.#currentFocusIndex - 1);\n        } else if (this.#currentFocusIndex === 0) {\n          // if on first option, move focus back to trigger\n          this.#trigger.focus();\n          this.#currentFocusIndex = -1;\n        }\n        break;\n\n      case 'Home':\n        e.preventDefault();\n        this.focusOption(0);\n        break;\n\n      case 'End':\n        e.preventDefault();\n        this.focusOption(options.length - 1);\n        break;\n\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n\n        // if dropdown is closed and trigger is focused, open it\n        if (\n          this.getAttribute('aria-hidden') === 'true' &&\n          document.activeElement === this.#trigger\n        ) {\n          this.show();\n          return;\n        }\n\n        // if focus is on an option, select it\n        if (this.#currentFocusIndex >= 0) {\n          this.selectOption({ target: options[this.#currentFocusIndex] });\n        } else if (document.activeElement === this.#trigger) {\n          // if focus is on trigger, toggle the dropdown\n          this.toggleDropdown();\n        }\n        break;\n\n      default:\n        // handle typeahead - find option starting with pressed key\n        const key = e.key.toLowerCase();\n\n        // only proceed if it's a single character\n        if (key.length === 1) {\n          // find the first option that starts with the pressed key\n          const matchingOption = options.find((option) =>\n            option.textContent.trim().toLowerCase().startsWith(key)\n          );\n\n          if (matchingOption) {\n            const index = options.indexOf(matchingOption);\n            this.focusOption(index);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * focuses a specific option by index\n   * @param {number} index - the index of the option to focus\n   */\n  focusOption(index) {\n    const options = Array.from(this.#options);\n\n    // reset tabindex on all options\n    options.forEach((opt) => {\n      opt.setAttribute('tabindex', '-1');\n    });\n\n    // set tabindex on target option and focus it\n    if (options[index]) {\n      options[index].setAttribute('tabindex', '0');\n      options[index].focus();\n      this.#currentFocusIndex = index;\n\n      // Ensure the option is visible in the dropdown\n      options[index].scrollIntoView({\n        block: 'nearest', // Only scroll if needed\n        behavior: 'smooth' // Smooth scroll for better UX during keyboard nav\n      });\n    }\n  }\n\n  /**\n   * toggles the dropdown open/closed\n   */\n  toggleDropdown() {\n    if (this.getAttribute('aria-hidden') === 'true') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * selects an option from the dropdown\n   * @param {Event} e - the click event\n   */\n  selectOption(e) {\n    const option = e.target.closest('dropdown-option');\n    if (!option) return;\n\n    // update aria-selected on all options\n    this.#options.forEach((opt) => {\n      opt.setAttribute('aria-selected', 'false');\n      opt.removeAttribute('selected');\n    });\n\n    // mark selected option (keep both attributes in sync)\n    option.setAttribute('aria-selected', 'true');\n    option.setAttribute('selected', '');\n\n    // update the input value\n    if (this.#input) {\n      this.#input.value = this.#getOptionValue(option);\n    }\n\n    // update the visible label\n    if (this.#label) {\n      this.#label.textContent = option.textContent.trim();\n    }\n\n    // dispatch change event\n    this.dispatchEvent(\n      new CustomEvent('change', {\n        detail: {\n          value: this.#getOptionValue(option),\n          text: option.textContent.trim(),\n        },\n        bubbles: true,\n      })\n    );\n\n    // close the dropdown\n    this.hide();\n  }\n\n  /**\n   * Determines if the dropdown should open upward based on available space\n   * @private\n   */\n  #determineDirection() {\n    // If position is explicitly set, honor that\n    const userPosition = this.getAttribute('position');\n    if (userPosition === 'up' || userPosition === 'down') {\n      return userPosition;\n    }\n    \n    // Calculate available space\n    const rect = this.getBoundingClientRect();\n    const spaceBelow = window.innerHeight - rect.bottom;\n    const estimatedOptionsHeight = Math.min(\n      this.#options.length * 40, // Rough estimate of option height\n      parseInt(getComputedStyle(this).getPropertyValue('--options-max-height') || '15rem') * 16 // Convert rem to px\n    );\n    \n    // Determine if there's not enough space below, but more space above\n    if (spaceBelow < estimatedOptionsHeight && rect.top > estimatedOptionsHeight) {\n      return 'up';\n    }\n    \n    // Default to down\n    return 'down';\n  }\n\n  /**\n   * shows the dropdown options\n   */\n  show() {\n    // Determine direction to open\n    const direction = this.#determineDirection();\n    this.setAttribute('direction', direction);\n    \n    // set attributes for open state\n    this.setAttribute('aria-hidden', 'false');\n    this.#trigger.setAttribute('aria-expanded', 'true');\n\n    // find selected option or default to first\n    const selectedOption = Array.from(this.#options).find(\n      (opt) => opt.getAttribute('aria-selected') === 'true'\n    );\n\n    if (selectedOption) {\n      const selectedIndex = Array.from(this.#options).indexOf(selectedOption);\n      this.focusOption(selectedIndex);\n      // For initial open, ensure selected item is centered for better visibility\n      selectedOption.scrollIntoView({\n        block: 'center',  // Center the selected item in view\n        behavior: 'instant' // No animation on initial open\n      });\n    } else if (this.#options.length > 0) {\n      this.focusOption(0);\n    }\n\n    // add global event listeners\n    document.addEventListener('click', this.#handleDocumentClick);\n    document.addEventListener('keydown', this.#handleKeyDown);\n  }\n\n  /**\n   * hides the dropdown options\n   */\n  hide() {\n    // set attributes for closed state\n    this.setAttribute('aria-hidden', 'true');\n    this.#trigger.setAttribute('aria-expanded', 'false');\n    \n    // Remove direction attribute\n    this.removeAttribute('direction');\n\n    // reset the current focus index\n    this.#currentFocusIndex = -1;\n\n    // remove global event listeners\n    document.removeEventListener('click', this.#handleDocumentClick);\n    document.removeEventListener('keydown', this.#handleKeyDown);\n\n    // return focus to trigger\n    this.#trigger.focus();\n  }\n}\n","/**\n * dropdown-select-trigger component\n * @class DropdownSelectTrigger\n * @extends HTMLElement\n */\nexport class DropdownSelectTrigger extends HTMLElement {\n  #handleKeyDown;\n  #handleClick;\n  \n  constructor() {\n    super();\n    // Make the trigger focusable\n    this.setAttribute('tabindex', '0');\n    this.#handleKeyDown = this.#onKeyDown.bind(this);\n    this.#handleClick = this.#onClick.bind(this);\n  }\n\n  connectedCallback() {\n    // Add caret if not present\n    if (!this.querySelector('.dropdown-caret')) {\n      const caret = document.createElement('span');\n      caret.className = 'dropdown-caret';\n      this.appendChild(caret);\n    }\n    \n    // Add event listeners\n    this.addEventListener('keydown', this.#handleKeyDown);\n    this.addEventListener('click', this.#handleClick);\n  }\n  \n  disconnectedCallback() {\n    this.removeEventListener('keydown', this.#handleKeyDown);\n    this.removeEventListener('click', this.#handleClick);\n  }\n  \n  /**\n   * Handle keydown events on the trigger\n   * @param {KeyboardEvent} e - The keyboard event\n   * @private\n   */\n  #onKeyDown(e) {\n    // Handle Enter and Space key presses\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      e.stopPropagation(); // Prevent event bubbling\n      this.#toggleDropdown();\n    }\n  }\n  \n  /**\n   * Handle click events on the trigger\n   * @param {MouseEvent} e - The mouse event\n   * @private\n   */\n  #onClick(e) {\n    this.#toggleDropdown();\n  }\n  \n  /**\n   * Toggle the parent dropdown\n   * @private\n   */\n  #toggleDropdown() {\n    const dropdown = this.closest('dropdown-select');\n    if (dropdown && typeof dropdown.toggleDropdown === 'function') {\n      dropdown.toggleDropdown();\n    }\n  }\n}\n","/**\n * dropdown-options component\n * @class DropdownOptions\n * @extends HTMLElement\n */\nexport class DropdownOptions extends HTMLElement {\n  constructor() {\n    super();\n  }\n}\n","/**\n * dropdown-option component\n * @class DropdownOption\n * @extends HTMLElement\n */\nexport class DropdownOption extends HTMLElement {\n  #handleClick;\n  \n  constructor() {\n    super();\n    this.#handleClick = this.#onClick.bind(this);\n  }\n  \n  connectedCallback() {\n    // Add click event listener\n    this.addEventListener('click', this.#handleClick);\n  }\n  \n  disconnectedCallback() {\n    // Clean up event listener\n    this.removeEventListener('click', this.#handleClick);\n  }\n  \n  /**\n   * Handle click events on the option\n   * @param {MouseEvent} e - The mouse event\n   * @private\n   */\n  #onClick(e) {\n    e.preventDefault();\n    this.#notifySelection();\n  }\n  \n  /**\n   * Notify the parent dropdown that this option was selected\n   * @private\n   */\n  #notifySelection() {\n    const dropdown = this.closest('dropdown-select');\n    if (dropdown && typeof dropdown.selectOption === 'function') {\n      dropdown.selectOption({ target: this });\n    }\n  }\n}\n","/**\n * @file Main entry point for dropdown-select web component\n * @author Cory Schulz\n * @version 0.1.0\n */\n\n// import styles\nimport './styles/dropdown-select.scss';\n\n// import components\nimport { DropdownSelect } from './components/dropdown-select.js';\nimport { DropdownSelectTrigger } from './components/dropdown-select-trigger.js';\nimport { DropdownOptions } from './components/dropdown-options.js';\nimport { DropdownOption } from './components/dropdown-option.js';\n\n// export components for external use\nexport { DropdownSelect, DropdownSelectTrigger, DropdownOptions, DropdownOption };\n\n// define custom elements if not already defined\nif (!customElements.get('dropdown-select')) {\n  customElements.define('dropdown-select', DropdownSelect);\n}\n\nif (!customElements.get('dropdown-select-trigger')) {\n  customElements.define('dropdown-select-trigger', DropdownSelectTrigger);\n}\n\nif (!customElements.get('dropdown-options')) {\n  customElements.define('dropdown-options', DropdownOptions);\n}\n\nif (!customElements.get('dropdown-option')) {\n  customElements.define('dropdown-option', DropdownOption);\n}\n"],"names":["DropdownSelect","HTMLElement","handleDocumentClick","handleKeyDown","trigger","input","optionsContainer","options","label","currentFocusIndex","observedAttributes","constructor","super","this","setAttribute","handleOutsideClick","bind","handleKeyboardNavigation","connectedCallback","querySelector","querySelectorAll","setupAriaAttributes","bindUI","initializeSelectedOption","hide","disconnectedCallback","unbindUI","getOptionValue","option","getAttribute","dataset","value","textContent","trim","selectedOption","Array","from","find","opt","hasAttribute","forEach","removeAttribute","dispatchEvent","CustomEvent","detail","text","bubbles","listbox","id","Date","now","index","document","removeEventListener","e","contains","target","key","preventDefault","activeElement","length","focusOption","focus","show","selectOption","toggleDropdown","toLowerCase","matchingOption","startsWith","indexOf","scrollIntoView","block","behavior","closest","determineDirection","userPosition","rect","getBoundingClientRect","spaceBelow","window","innerHeight","bottom","estimatedOptionsHeight","Math","min","parseInt","getComputedStyle","getPropertyValue","top","direction","selectedIndex","addEventListener","DropdownSelectTrigger","handleClick","onKeyDown","onClick","caret","createElement","className","appendChild","stopPropagation","dropdown","DropdownOptions","DropdownOption","notifySelection","customElements","get","define"],"mappings":"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"}